# Real-Time Accident Detection and Alert System

import os
import cv2
import math
import geocoder
import requests
import pandas as pd
import numpy as np
from keras.preprocessing import image
from keras.utils import np_utils
from matplotlib import pyplot as plt
from skimage.transform import resize
from keras.applications.vgg16 import preprocess_input, VGG16
from sklearn.model_selection import train_test_split
from keras.models import Sequential
from keras.layers import Dense, InputLayer
from geopy.geocoders import Nominatim
from twilio.rest import Client

# Step 1: Extract Frames from Video
count = 0
videoFile = "Accidents.mp4"
cap = cv2.VideoCapture(videoFile)
frameRate = cap.get(5)

while cap.isOpened():
    frameId = cap.get(1)
    ret, frame = cap.read()
    if not ret:
        break
    if frameId % math.floor(frameRate) == 0:
        filename = f"{count}.jpg"
        count += 1
        cv2.imwrite(filename, frame)
cap.release()

# Step 2: Load Images and Labels
data = pd.read_csv('mapping.csv')
X = [plt.imread(img_name) for img_name in data.Image_ID]
X = np.array(X)
y = data.Class

dummy_y = np_utils.to_categorical(y)

# Step 3: Resize Images
X_resized = [resize(img, preserve_range=True, output_shape=(224, 224)).astype(int) for img in X]
X = np.array(X_resized)
X = preprocess_input(X)

# Step 4: Train/Test Split
X_train, X_valid, y_train, y_valid = train_test_split(X, dummy_y, test_size=0.3, random_state=42)

# Step 5: Feature Extraction using VGG16
base_model = VGG16(weights='imagenet', include_top=False, input_shape=(224, 224, 3))
X_train = base_model.predict(X_train).reshape(X_train.shape[0], -1)
X_valid = base_model.predict(X_valid).reshape(X_valid.shape[0], -1)

X_train /= X_train.max()
X_valid /= X_train.max()

# Step 6: Train Model
model = Sequential([
    InputLayer(input_shape=(7*7*512,)),
    Dense(1024, activation='sigmoid'),
    Dense(2, activation='softmax')
])

model.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])
model.fit(X_train, y_train, epochs=100, validation_data=(X_valid, y_valid))

# Step 7: Testing on New Video
count = 0
test_video = "Accident-1.mp4"
cap = cv2.VideoCapture(test_video)
frameRate = cap.get(5)

while cap.isOpened():
    frameId = cap.get(1)
    ret, frame = cap.read()
    if not ret:
        break
    if frameId % math.floor(frameRate) == 0:
        filename = f"test{count}.jpg"
        count += 1
        cv2.imwrite(filename, frame)
cap.release()

# Step 8: Load and Preprocess Test Images
test = pd.read_csv('test.csv')
test_imgs = [plt.imread(img_name) for img_name in test.Image_ID]
test_imgs = [resize(img, preserve_range=True, output_shape=(224, 224)).astype(int) for img in test_imgs]
test_imgs = np.array(test_imgs)
test_imgs = preprocess_input(test_imgs)
test_features = base_model.predict(test_imgs).reshape(len(test_imgs), -1)
test_features /= test_features.max()

predictions = model.predict(test_features)

# Step 9: Output Predictions
for pred in predictions:
    print("Accident" if pred[0] > pred[1] else "No Accident")

# Step 10: Real-Time Display with SMS Alert
geoLoc = Nominatim(user_agent="GetLoc")
g = geocoder.ip('me')
locname = geoLoc.reverse(g.latlng)

account_sid = "<ENTER_YOUR_TWILIO_ACCOUNT_SID>"
auth_token = "<ENTER_YOUR_TWILIO_AUTH_TOKEN>"
from_number = "<ENTER_YOUR_TWILIO_PHONE_NUMBER>"
to_number = "<ENTER_RECEIVER_PHONE_NUMBER>"

client = Client(account_sid, auth_token)
cap = cv2.VideoCapture('Accident-1.mp4')
i = 0
flag = False

while True:
    ret, frame = cap.read()
    if not ret:
        break

    pred = "No Accident" if predictions[int(i / 15) % len(predictions)][1] > predictions[int(i / 15) % len(predictions)][0] else "Accident"
    if pred == "Accident":
        flag = True

    cv2.putText(frame, pred, (50, 50), cv2.FONT_HERSHEY_SIMPLEX, 1, (0, 255, 255), 3, cv2.LINE_4)
    cv2.imshow('Frame', frame)
    i += 1

    if cv2.waitKey(1) & 0xFF == ord('q'):
        break

if flag:
    client.messages.create(
        body=f"Accident detected at {locname.address}",
        from_=from_number,
        to=to_number
    )

cap.release()
cv2.destroyAllWindows()
